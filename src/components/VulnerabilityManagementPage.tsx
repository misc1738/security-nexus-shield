import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Bug, Shield, AlertTriangle, Calendar, Search, Filter, Download, Eye, CheckCircle } from 'lucide-react';
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, LineChart, Line } from 'recharts';

interface Vulnerability {
  id: string;
  cveId: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvssScore: number;
  affectedAssets: string[];
  status: 'open' | 'in-progress' | 'resolved' | 'accepted' | 'false-positive';
  discoveredDate: string;
  dueDate: string;
  assignee: string;
  vendor: string;
  product: string;
  version: string;
  patchAvailable: boolean;
  exploitAvailable: boolean;
  tags: string[];
}

interface ScanResult {
  id: string;
  scanName: string;
  targetAssets: string[];
  startTime: string;
  endTime: string;
  status: 'running' | 'completed' | 'failed' | 'scheduled';
  vulnerabilitiesFound: number;
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
}

const VulnerabilityManagementPage = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scans, setScans] = useState<ScanResult[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');

  useEffect(() => {
    // Initialize with mock data
    setVulnerabilities([
      {
        id: 'VULN-001',
        cveId: 'CVE-2024-0001',
        title: 'Remote Code Execution in Apache HTTP Server',
        description: 'A critical vulnerability allowing remote code execution through malformed HTTP requests',
        severity: 'critical',
        cvssScore: 9.8,
        affectedAssets: ['SRV-WEB-01', 'SRV-WEB-02'],
        status: 'open',
        discoveredDate: '2024-01-15T10:30:00Z',
        dueDate: '2024-01-22T23:59:59Z',
        assignee: 'John Smith',
        vendor: 'Apache',
        product: 'HTTP Server',
        version: '2.4.41',
        patchAvailable: true,
        exploitAvailable: true,
        tags: ['web-server', 'rce', 'internet-facing']
      },
      {
        id: 'VULN-002',
        cveId: 'CVE-2024-0002',
        title: 'SQL Injection in Custom Application',
        description: 'SQL injection vulnerability in user authentication module',
        severity: 'high',
        cvssScore: 8.1,
        affectedAssets: ['SRV-DATABASE-01'],
        status: 'in-progress',
        discoveredDate: '2024-01-14T14:20:00Z',
        dueDate: '2024-01-28T23:59:59Z',
        assignee: 'Jane Doe',
        vendor: 'Internal',
        product: 'HR Portal',
        version: '1.2.3',
        patchAvailable: false,
        exploitAvailable: false,
        tags: ['sql-injection', 'web-app', 'authentication']
      }
    ]);

    setScans([
      {
        id: 'SCAN-001',
        scanName: 'Weekly Infrastructure Scan',
        targetAssets: ['All Servers', 'Network Devices'],
        startTime: '2024-01-15T02:00:00Z',
        endTime: '2024-01-15T06:30:00Z',
        status: 'completed',
        vulnerabilitiesFound: 47,
        criticalCount: 2,
        highCount: 8,
        mediumCount: 22,
        lowCount: 15
      },
      {
        id: 'SCAN-002',
        scanName: 'Web Application Security Test',
        targetAssets: ['Web Servers', 'Application Servers'],
        startTime: '2024-01-16T20:00:00Z',
        endTime: '',
        status: 'running',
        vulnerabilitiesFound: 0,
        criticalCount: 0,
        highCount: 0,
        mediumCount: 0,
        lowCount: 0
      }
    ]);
  }, []);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500';
      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500';
      case 'low': return 'bg-green-500/20 text-green-400 border-green-500';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-red-500/20 text-red-400 border-red-500';
      case 'in-progress': return 'bg-blue-500/20 text-blue-400 border-blue-500';
      case 'resolved': return 'bg-green-500/20 text-green-400 border-green-500';
      case 'accepted': return 'bg-orange-500/20 text-orange-400 border-orange-500';
      case 'false-positive': return 'bg-gray-500/20 text-gray-400 border-gray-500';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500';
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.cveId.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter;
    const matchesStatus = statusFilter === 'all' || vuln.status === statusFilter;
    return matchesSearch && matchesSeverity && matchesStatus;
  });

  const getVulnerabilityTrendData = () => {
    return Array.from({ length: 7 }, (_, i) => ({
      date: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toLocaleDateString(),
      critical: Math.floor(Math.random() * 5),
      high: Math.floor(Math.random() * 15) + 5,
      medium: Math.floor(Math.random() * 25) + 10,
      low: Math.floor(Math.random() * 20) + 15
    }));
  };

  const getSeverityDistribution = () => {
    const counts = vulnerabilities.reduce((acc, vuln) => {
      acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return [
      { name: 'Critical', value: counts.critical || 0, color: '#ef4444' },
      { name: 'High', value: counts.high || 0, color: '#f97316' },
      { name: 'Medium', value: counts.medium || 0, color: '#eab308' },
      { name: 'Low', value: counts.low || 0, color: '#22c55e' }
    ];
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-white flex items-center gap-2">
            <Bug className="w-7 h-7 text-red-400" />
            Vulnerability Management
          </h1>
          <p className="text-slate-400">Identify, assess, and remediate security vulnerabilities</p>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" className="border-slate-600 text-slate-300">
            <Download className="w-4 h-4 mr-2" />
            Export Report
          </Button>
          <Button className="bg-blue-600 hover:bg-blue-700">
            <Shield className="w-4 h-4 mr-2" />
            New Scan
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-slate-800 border-slate-700">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-400">Total Vulnerabilities</p>
                <p className="text-2xl font-bold text-white">{vulnerabilities.length}</p>
              </div>
              <Bug className="w-8 h-8 text-red-400" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-slate-800 border-slate-700">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-400">Critical</p>
                <p className="text-2xl font-bold text-red-400">
                  {vulnerabilities.filter(v => v.severity === 'critical').length}
                </p>
              </div>
              <AlertTriangle className="w-8 h-8 text-red-400" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-slate-800 border-slate-700">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-400">Overdue</p>
                <p className="text-2xl font-bold text-orange-400">3</p>
              </div>
              <Calendar className="w-8 h-8 text-orange-400" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-slate-800 border-slate-700">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-400">Resolved This Month</p>
                <p className="text-2xl font-bold text-green-400">24</p>
              </div>
              <CheckCircle className="w-8 h-8 text-green-400" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="vulnerabilities" className="space-y-6">
        <TabsList className="bg-slate-800 border-slate-700">
          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
          <TabsTrigger value="scans">Scans</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="vulnerabilities" className="space-y-6">
          {/* Filters */}
          <Card className="bg-slate-800 border-slate-700">
            <CardContent className="p-4">
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                  <Input
                    placeholder="Search vulnerabilities..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 bg-slate-700 border-slate-600 text-white placeholder:text-slate-400"
                  />
                </div>
                <Select value={severityFilter} onValueChange={setSeverityFilter}>
                  <SelectTrigger className="w-[180px] bg-slate-700 border-slate-600 text-white">
                    <SelectValue placeholder="Severity" />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-700 border-slate-600">
                    <SelectItem value="all">All Severities</SelectItem>
                    <SelectItem value="critical">Critical</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="low">Low</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={statusFilter} onValueChange={setStatusFilter}>
                  <SelectTrigger className="w-[180px] bg-slate-700 border-slate-600 text-white">
                    <SelectValue placeholder="Status" />
                  </SelectTrigger>
                  <SelectContent className="bg-slate-700 border-slate-600">
                    <SelectItem value="all">All Status</SelectItem>
                    <SelectItem value="open">Open</SelectItem>
                    <SelectItem value="in-progress">In Progress</SelectItem>
                    <SelectItem value="resolved">Resolved</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Vulnerabilities List */}
          <Card className="bg-slate-800 border-slate-700">
            <CardHeader>
              <CardTitle className="text-slate-200">Vulnerability Inventory</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {filteredVulnerabilities.map((vuln) => (
                  <div key={vuln.id} className="p-4 rounded-lg bg-slate-700/50 border border-slate-600">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <span className="text-sm font-medium text-white">{vuln.cveId}</span>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {vuln.severity.toUpperCase()}
                          </Badge>
                          <Badge className={getStatusColor(vuln.status)}>
                            {vuln.status.toUpperCase()}
                          </Badge>
                          <span className="text-sm text-slate-400">CVSS: {vuln.cvssScore}</span>
                          {vuln.patchAvailable && (
                            <Badge className="bg-blue-500/20 text-blue-400 border-blue-500">
                              PATCH AVAILABLE
                            </Badge>
                          )}
                          {vuln.exploitAvailable && (
                            <Badge className="bg-red-500/20 text-red-400 border-red-500">
                              EXPLOIT AVAILABLE
                            </Badge>
                          )}
                        </div>
                        <h4 className="text-sm font-medium text-slate-200 mb-1">{vuln.title}</h4>
                        <p className="text-xs text-slate-400 mb-2">{vuln.description}</p>
                        <div className="flex items-center gap-4 text-xs text-slate-400 mb-2">
                          <span>Product: {vuln.vendor} {vuln.product} {vuln.version}</span>
                          <span>Assignee: {vuln.assignee}</span>
                          <span>Due: {new Date(vuln.dueDate).toLocaleDateString()}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <span className="text-xs text-slate-400">Affected Assets:</span>
                          {vuln.affectedAssets.map((asset) => (
                            <Badge key={asset} variant="outline" className="text-xs">
                              {asset}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      <Button size="sm" variant="outline" className="border-slate-600">
                        <Eye className="w-3 h-3" />
                      </Button>
                    </div>
                    
                    {vuln.tags.length > 0 && (
                      <div className="flex flex-wrap gap-1">
                        {vuln.tags.map((tag) => (
                          <Badge key={tag} variant="outline" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="scans" className="space-y-6">
          <Card className="bg-slate-800 border-slate-700">
            <CardHeader>
              <CardTitle className="text-slate-200">Vulnerability Scans</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {scans.map((scan) => (
                  <div key={scan.id} className="p-4 rounded-lg bg-slate-700/50 border border-slate-600">
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <h4 className="text-sm font-medium text-white">{scan.scanName}</h4>
                        <p className="text-xs text-slate-400">
                          Targets: {scan.targetAssets.join(', ')}
                        </p>
                      </div>
                      <Badge className={getStatusColor(scan.status)}>
                        {scan.status.toUpperCase()}
                      </Badge>
                    </div>
                    
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-center">
                      <div>
                        <p className="text-lg font-bold text-white">{scan.vulnerabilitiesFound}</p>
                        <p className="text-xs text-slate-400">Total Found</p>
                      </div>
                      <div>
                        <p className="text-lg font-bold text-red-400">{scan.criticalCount}</p>
                        <p className="text-xs text-slate-400">Critical</p>
                      </div>
                      <div>
                        <p className="text-lg font-bold text-orange-400">{scan.highCount}</p>
                        <p className="text-xs text-slate-400">High</p>
                      </div>
                      <div>
                        <p className="text-lg font-bold text-yellow-400">{scan.mediumCount}</p>
                        <p className="text-xs text-slate-400">Medium</p>
                      </div>
                      <div>
                        <p className="text-lg font-bold text-green-400">{scan.lowCount}</p>
                        <p className="text-xs text-slate-400">Low</p>
                      </div>
                    </div>
                    
                    <div className="flex justify-between text-xs text-slate-400 mt-3 pt-3 border-t border-slate-700">
                      <span>Started: {new Date(scan.startTime).toLocaleString()}</span>
                      {scan.endTime && (
                        <span>Completed: {new Date(scan.endTime).toLocaleString()}</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="text-slate-200">Vulnerability Trends</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={getVulnerabilityTrendData()}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis dataKey="date" stroke="#9ca3af" fontSize={12} />
                    <YAxis stroke="#9ca3af" fontSize={12} />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1f2937', 
                        border: '1px solid #374151',
                        borderRadius: '6px'
                      }}
                    />
                    <Line type="monotone" dataKey="critical" stroke="#ef4444" strokeWidth={2} />
                    <Line type="monotone" dataKey="high" stroke="#f97316" strokeWidth={2} />
                    <Line type="monotone" dataKey="medium" stroke="#eab308" strokeWidth={2} />
                    <Line type="monotone" dataKey="low" stroke="#22c55e" strokeWidth={2} />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="text-slate-200">Severity Distribution</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={getSeverityDistribution()}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis dataKey="name" stroke="#9ca3af" fontSize={12} />
                    <YAxis stroke="#9ca3af" fontSize={12} />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1f2937', 
                        border: '1px solid #374151',
                        borderRadius: '6px'
                      }}
                    />
                    <Bar dataKey="value" fill="#3b82f6" />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default VulnerabilityManagementPage;